// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_EntityInterface
#include <EntityInterface.h>
#endif
#ifndef INCLUDED_Equipment
#include <Equipment.h>
#endif
#ifndef INCLUDED_EquipmentItem
#include <EquipmentItem.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_PlayerAnimator
#include <PlayerAnimator.h>
#endif
#ifndef INCLUDED_PlayerControls
#include <PlayerControls.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_17_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",17,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_33_loadTarget,"Player","loadTarget",0x9c06a5e4,"Player.loadTarget","Player.hx",33,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_38_getTarget,"Player","getTarget",0xb913315a,"Player.getTarget","Player.hx",38,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_43_getEquipped,"Player","getEquipped",0x29ca5e68,"Player.getEquipped","Player.hx",43,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_48_equip,"Player","equip",0x665ce603,"Player.equip","Player.hx",48,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_54_addEquipment,"Player","addEquipment",0x554a26fa,"Player.addEquipment","Player.hx",54,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_67_removeEquipment,"Player","removeEquipment",0x5463647d,"Player.removeEquipment","Player.hx",67,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_78_getEquipment,"Player","getEquipment",0x654ca1e5,"Player.getEquipment","Player.hx",78,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_82_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",82,0xa27fc9dd)

void Player_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_17_new)
HXLINE(  18)		super::__construct(x,y,null());
HXLINE(  19)		this->playerAnimator =  ::PlayerAnimator_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  20)		this->playerControls =  ::PlayerControls_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  21)		this->equipment =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE(  23)		this->setSize(( (Float)(4) ),( (Float)(6) ));
HXLINE(  24)		this->offset->set(5,10);
HXLINE(  26)		this->equipped = ::Equipment_obj::HOE_dyn();
HXLINE(  27)		this->addEquipment(::Equipment_obj::SEED_dyn(),null());
HXLINE(  28)		this->addEquipment(::Equipment_obj::HOE_dyn(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33e526a5) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x33e526a5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Player_obj::loadTarget( ::Entity targetLoad){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_33_loadTarget)
HXDLIN(  33)		this->target = targetLoad;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,loadTarget,(void))

 ::Entity Player_obj::getTarget(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_38_getTarget)
HXDLIN(  38)		return this->target;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getTarget,return )

 ::Equipment Player_obj::getEquipped(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_43_getEquipped)
HXDLIN(  43)		return this->equipped;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getEquipped,return )

void Player_obj::equip( ::Equipment equipmentItem){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_48_equip)
HXDLIN(  48)		if (this->equipment->exists(equipmentItem)) {
HXLINE(  49)			this->equipped = equipmentItem;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,equip,(void))

void Player_obj::addEquipment( ::Equipment equipmentItem, ::Dynamic quantity){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_54_addEquipment)
HXDLIN(  54)		if (this->equipment->exists(equipmentItem)) {
HXLINE(  56)			if (::hx::IsNotNull( quantity )) {
HXLINE(  57)				this->equipment->get(equipmentItem).StaticCast<  ::EquipmentItem >()->add(( (int)(quantity) ));
            			}
            		}
            		else {
HXLINE(  59)			if (::hx::IsNotNull( quantity )) {
HXLINE(  60)				::Dynamic this1 = this->equipment;
HXDLIN(  60)				( ( ::haxe::ds::EnumValueMap)(this1) )->set(equipmentItem, ::EquipmentItem_obj::__alloc( HX_CTX ,equipmentItem,quantity));
            			}
            			else {
HXLINE(  62)				::Dynamic this1 = this->equipment;
HXDLIN(  62)				( ( ::haxe::ds::EnumValueMap)(this1) )->set(equipmentItem, ::EquipmentItem_obj::__alloc( HX_CTX ,equipmentItem,null()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,addEquipment,(void))

void Player_obj::removeEquipment( ::Equipment equipmentItem,int quantity){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_67_removeEquipment)
HXDLIN(  67)		if (this->equipment->exists(equipmentItem)) {
HXLINE(  69)			if ((quantity > 0)) {
HXLINE(  70)				this->equipment->get(equipmentItem).StaticCast<  ::EquipmentItem >()->remove(quantity);
            			}
HXLINE(  71)			if ((this->equipment->get(equipmentItem).StaticCast<  ::EquipmentItem >()->getQuantity() < 1)) {
HXLINE(  72)				this->equipment->remove(equipmentItem);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,removeEquipment,(void))

 ::haxe::ds::EnumValueMap Player_obj::getEquipment(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_78_getEquipment)
HXDLIN(  78)		return this->equipment;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getEquipment,return )

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_82_update)
HXLINE(  83)		this->playerControls->checkInputs();
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if ((this->velocity->x == 0)) {
HXLINE(  85)			_hx_tmp = (this->velocity->y != 0);
            		}
            		else {
HXLINE(  85)			_hx_tmp = true;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  86)			this->playerAnimator->setAnimationState(HX_("RUN",2b,83,3e,00));
            		}
            		else {
HXLINE(  88)			this->playerAnimator->setAnimationState(HX_("IDLE",14,6f,74,30));
            		}
HXLINE(  90)		this->playerAnimator->updateAnimation();
HXLINE(  92)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Player_obj > Player_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(playerControls,"playerControls");
	HX_MARK_MEMBER_NAME(playerAnimator,"playerAnimator");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(equipment,"equipment");
	HX_MARK_MEMBER_NAME(equipped,"equipped");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playerControls,"playerControls");
	HX_VISIT_MEMBER_NAME(playerAnimator,"playerAnimator");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(equipment,"equipment");
	HX_VISIT_MEMBER_NAME(equipped,"equipped");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"equip") ) { return ::hx::Val( equip_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"equipped") ) { return ::hx::Val( equipped ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"equipment") ) { return ::hx::Val( equipment ); }
		if (HX_FIELD_EQ(inName,"getTarget") ) { return ::hx::Val( getTarget_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadTarget") ) { return ::hx::Val( loadTarget_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getEquipped") ) { return ::hx::Val( getEquipped_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addEquipment") ) { return ::hx::Val( addEquipment_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEquipment") ) { return ::hx::Val( getEquipment_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerControls") ) { return ::hx::Val( playerControls ); }
		if (HX_FIELD_EQ(inName,"playerAnimator") ) { return ::hx::Val( playerAnimator ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeEquipment") ) { return ::hx::Val( removeEquipment_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Player_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::Entity >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"equipped") ) { equipped=inValue.Cast<  ::Equipment >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"equipment") ) { equipment=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerControls") ) { playerControls=inValue.Cast<  ::PlayerControls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerAnimator") ) { playerAnimator=inValue.Cast<  ::PlayerAnimator >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("playerControls",f7,f6,02,4a));
	outFields->push(HX_("playerAnimator",e8,eb,38,9b));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("equipment",4e,34,85,3a));
	outFields->push(HX_("equipped",1f,cc,11,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::PlayerControls */ ,(int)offsetof(Player_obj,playerControls),HX_("playerControls",f7,f6,02,4a)},
	{::hx::fsObject /*  ::PlayerAnimator */ ,(int)offsetof(Player_obj,playerAnimator),HX_("playerAnimator",e8,eb,38,9b)},
	{::hx::fsObject /*  ::Entity */ ,(int)offsetof(Player_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(Player_obj,equipment),HX_("equipment",4e,34,85,3a)},
	{::hx::fsObject /*  ::Equipment */ ,(int)offsetof(Player_obj,equipped),HX_("equipped",1f,cc,11,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("playerControls",f7,f6,02,4a),
	HX_("playerAnimator",e8,eb,38,9b),
	HX_("target",51,f3,ec,86),
	HX_("equipment",4e,34,85,3a),
	HX_("equipped",1f,cc,11,73),
	HX_("loadTarget",17,22,18,3c),
	HX_("getTarget",87,7c,43,03),
	HX_("getEquipped",d5,8e,05,99),
	HX_("equip",b0,d6,82,72),
	HX_("addEquipment",ed,55,d9,39),
	HX_("removeEquipment",6a,cf,a3,7b),
	HX_("getEquipment",d8,d0,db,49),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

