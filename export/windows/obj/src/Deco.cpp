// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Deco
#include <Deco.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f62cd53a42b15f8_8_new,"Deco","new",0x36e8e7ff,"Deco.new","Deco.hx",8,0xb7ec5c51)

void Deco_obj::__construct(Float assignedX,Float assignedY,::String type){
            	HX_STACKFRAME(&_hx_pos_3f62cd53a42b15f8_8_new)
HXLINE(   9)		super::__construct(assignedX,assignedY,null());
HXLINE(  10)		::String graphic = HX_("assets/images/transparent.png",42,7a,6c,dd);
HXLINE(  11)		this->set_immovable(true);
HXLINE(  13)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("CARROT",83,de,66,6d)) ){
HXLINE(  16)			graphic = HX_("assets/images/carrot.png",a9,08,fc,c1);
HXDLIN(  16)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("ROCK",a5,ab,6f,36)) ){
HXLINE(  22)			graphic = HX_("assets/images/rock.png",0b,b2,62,8e);
HXDLIN(  22)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("TURNIP",a4,8c,78,bd)) ){
HXLINE(  18)			graphic = HX_("assets/images/turnip.png",4a,db,b5,a7);
HXDLIN(  18)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("WEED",ed,27,b6,39)) ){
HXLINE(  20)			graphic = HX_("assets/images/weed.png",53,f2,70,d1);
HXDLIN(  20)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE(  25)		this->loadGraphic(graphic,false,8,8,null(),null());
            	}

Dynamic Deco_obj::__CreateEmpty() { return new Deco_obj; }

void *Deco_obj::_hx_vtable = 0;

Dynamic Deco_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Deco_obj > _hx_result = new Deco_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Deco_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x019272b1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x019272b1;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< Deco_obj > Deco_obj::__new(Float assignedX,Float assignedY,::String type) {
	::hx::ObjectPtr< Deco_obj > __this = new Deco_obj();
	__this->__construct(assignedX,assignedY,type);
	return __this;
}

::hx::ObjectPtr< Deco_obj > Deco_obj::__alloc(::hx::Ctx *_hx_ctx,Float assignedX,Float assignedY,::String type) {
	Deco_obj *__this = (Deco_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Deco_obj), true, "Deco"));
	*(void **)__this = Deco_obj::_hx_vtable;
	__this->__construct(assignedX,assignedY,type);
	return __this;
}

Deco_obj::Deco_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Deco_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Deco_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Deco_obj::__mClass;

void Deco_obj::__register()
{
	Deco_obj _hx_dummy;
	Deco_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Deco",8d,7c,3f,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Deco_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Deco_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Deco_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

