// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_TilemapConfigure
#include <TilemapConfigure.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_14e65485ccf215cd_9_setWallTiles,"TilemapConfigure","setWallTiles",0x9b7bee4f,"TilemapConfigure.setWallTiles","TilemapConfigure.hx",9,0x600d3dc6)

void TilemapConfigure_obj::__construct() { }

Dynamic TilemapConfigure_obj::__CreateEmpty() { return new TilemapConfigure_obj; }

void *TilemapConfigure_obj::_hx_vtable = 0;

Dynamic TilemapConfigure_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TilemapConfigure_obj > _hx_result = new TilemapConfigure_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TilemapConfigure_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x488002b8;
}

void TilemapConfigure_obj::setWallTiles( ::flixel::tile::FlxTilemap tilemap,::Array< int > wallTiles){
            	HX_STACKFRAME(&_hx_pos_14e65485ccf215cd_9_setWallTiles)
HXLINE(  10)		int totalTiles = (tilemap->frames->frames->length - 1);
HXLINE(  11)		::haxe::Log_obj::trace(totalTiles,::hx::SourceInfo(HX_("source/TilemapConfigure.hx",52,d7,51,51),11,HX_("TilemapConfigure",f8,4f,9e,72),HX_("setWallTiles",19,4c,a0,3b)));
HXLINE(  12)		{
HXLINE(  12)			int _g = 1;
HXDLIN(  12)			int _g1 = totalTiles;
HXDLIN(  12)			while((_g < _g1)){
HXLINE(  12)				_g = (_g + 1);
HXDLIN(  12)				int tile = (_g - 1);
HXLINE(  13)				tilemap->setTileProperties(tile,0,null(),null(),null());
            			}
            		}
HXLINE(  15)		{
HXLINE(  15)			int _g2 = 0;
HXDLIN(  15)			while((_g2 < wallTiles->length)){
HXLINE(  15)				int tile = wallTiles->__get(_g2);
HXDLIN(  15)				_g2 = (_g2 + 1);
HXLINE(  16)				tilemap->setTileProperties(tile,4369,null(),null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TilemapConfigure_obj,setWallTiles,(void))


TilemapConfigure_obj::TilemapConfigure_obj()
{
}

bool TilemapConfigure_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"setWallTiles") ) { outValue = setWallTiles_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TilemapConfigure_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TilemapConfigure_obj_sStaticStorageInfo = 0;
#endif

::hx::Class TilemapConfigure_obj::__mClass;

static ::String TilemapConfigure_obj_sStaticFields[] = {
	HX_("setWallTiles",19,4c,a0,3b),
	::String(null())
};

void TilemapConfigure_obj::__register()
{
	TilemapConfigure_obj _hx_dummy;
	TilemapConfigure_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TilemapConfigure",f8,4f,9e,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TilemapConfigure_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TilemapConfigure_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TilemapConfigure_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TilemapConfigure_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TilemapConfigure_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

