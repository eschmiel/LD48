// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_EntityInterface
#include <EntityInterface.h>
#endif
#ifndef INCLUDED_Equipment
#include <Equipment.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_PlayerActions
#include <PlayerActions.h>
#endif
#ifndef INCLUDED_PlayerControls
#include <PlayerControls.h>
#endif
#ifndef INCLUDED_PlayerTarget
#include <PlayerTarget.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3255715d04918437_24_new,"PlayerControls","new",0x0fed0389,"PlayerControls.new","PlayerControls.hx",24,0x42a78007)
HX_LOCAL_STACK_FRAME(_hx_pos_3255715d04918437_33_checkInputs,"PlayerControls","checkInputs",0x2f2d9c3a,"PlayerControls.checkInputs","PlayerControls.hx",33,0x42a78007)
static const int _hx_array_data_f4588b17_2[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_f4588b17_3[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_f4588b17_4[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_f4588b17_5[] = {
	(int)39,(int)68,
};
static const int _hx_array_data_f4588b17_6[] = {
	(int)90,
};
static const int _hx_array_data_f4588b17_7[] = {
	(int)88,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3255715d04918437_76_updateMovement,"PlayerControls","updateMovement",0xb4e7b3cf,"PlayerControls.updateMovement","PlayerControls.hx",76,0x42a78007)
HX_LOCAL_STACK_FRAME(_hx_pos_3255715d04918437_113_action,"PlayerControls","action",0xdd48a82d,"PlayerControls.action","PlayerControls.hx",113,0x42a78007)
HX_LOCAL_STACK_FRAME(_hx_pos_3255715d04918437_21_boot,"PlayerControls","boot",0xd78f14e9,"PlayerControls.boot","PlayerControls.hx",21,0x42a78007)

void PlayerControls_obj::__construct( ::Player controlledPlayer){
            	HX_GC_STACKFRAME(&_hx_pos_3255715d04918437_24_new)
HXLINE(  25)		this->player = controlledPlayer;
HXLINE(  26)		this->playerActions =  ::PlayerActions_obj::__alloc( HX_CTX );
HXLINE(  28)		this->player->drag->set_x(( (Float)(1600) ));
HXLINE(  29)		this->player->drag->set_y(( (Float)(1600) ));
            	}

Dynamic PlayerControls_obj::__CreateEmpty() { return new PlayerControls_obj; }

void *PlayerControls_obj::_hx_vtable = 0;

Dynamic PlayerControls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayerControls_obj > _hx_result = new PlayerControls_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayerControls_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24c01e9f;
}

void PlayerControls_obj::checkInputs(){
            	HX_STACKFRAME(&_hx_pos_3255715d04918437_33_checkInputs)
HXLINE(  34)		 ::Dynamic directions =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("right",dc,0b,64,e9),false)
            			->setFixed(1,HX_("up",5b,66,00,00),false)
            			->setFixed(2,HX_("down",62,f8,6d,42),false)
            			->setFixed(3,HX_("left",07,08,b0,47),false));
HXLINE(  41)		directions->__SetField(HX_("up",5b,66,00,00),::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_2,2),1),::hx::paccDynamic);
HXLINE(  42)		directions->__SetField(HX_("down",62,f8,6d,42),::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_3,2),1),::hx::paccDynamic);
HXLINE(  43)		directions->__SetField(HX_("left",07,08,b0,47),::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_4,2),1),::hx::paccDynamic);
HXLINE(  44)		directions->__SetField(HX_("right",dc,0b,64,e9),::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_5,2),1),::hx::paccDynamic);
HXLINE(  46)		bool _hx_tmp;
HXDLIN(  46)		if (( (bool)(directions->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic)) )) {
HXLINE(  46)			_hx_tmp = ( (bool)(directions->__Field(HX_("down",62,f8,6d,42),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  46)			_hx_tmp = false;
            		}
HXDLIN(  46)		if (_hx_tmp) {
HXLINE(  48)			directions->__SetField(HX_("up",5b,66,00,00),false,::hx::paccDynamic);
HXLINE(  49)			directions->__SetField(HX_("down",62,f8,6d,42),false,::hx::paccDynamic);
            		}
HXLINE(  51)		bool _hx_tmp1;
HXDLIN(  51)		if (( (bool)(directions->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic)) )) {
HXLINE(  51)			_hx_tmp1 = ( (bool)(directions->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  51)			_hx_tmp1 = false;
            		}
HXDLIN(  51)		if (_hx_tmp1) {
HXLINE(  53)			directions->__SetField(HX_("left",07,08,b0,47),false,::hx::paccDynamic);
HXLINE(  54)			directions->__SetField(HX_("right",dc,0b,64,e9),false,::hx::paccDynamic);
            		}
HXLINE(  57)		bool _hx_tmp2;
HXDLIN(  57)		bool _hx_tmp3;
HXDLIN(  57)		bool _hx_tmp4;
HXDLIN(  57)		if (!(( (bool)(directions->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic)) ))) {
HXLINE(  57)			_hx_tmp4 = ( (bool)(directions->__Field(HX_("down",62,f8,6d,42),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  57)			_hx_tmp4 = true;
            		}
HXDLIN(  57)		if (!(_hx_tmp4)) {
HXLINE(  57)			_hx_tmp3 = ( (bool)(directions->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  57)			_hx_tmp3 = true;
            		}
HXDLIN(  57)		if (!(_hx_tmp3)) {
HXLINE(  57)			_hx_tmp2 = ( (bool)(directions->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  57)			_hx_tmp2 = true;
            		}
HXDLIN(  57)		if (_hx_tmp2) {
HXLINE(  58)			this->updateMovement(directions);
            		}
HXLINE(  60)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_6,1),2)) {
HXLINE(  62)			this->action();
            		}
HXLINE(  65)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_f4588b17_7,1),2)) {
HXLINE(  67)			 ::Equipment equipped = this->player->getEquipped();
HXLINE(  68)			if (::hx::IsEq( equipped,::Equipment_obj::HOE_dyn() )) {
HXLINE(  69)				this->player->equip(::Equipment_obj::SEED_dyn());
            			}
            			else {
HXLINE(  71)				this->player->equip(::Equipment_obj::HOE_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayerControls_obj,checkInputs,(void))

void PlayerControls_obj::updateMovement( ::Dynamic directions){
            	HX_STACKFRAME(&_hx_pos_3255715d04918437_76_updateMovement)
HXLINE(  77)		Float newAngle = ( (Float)(0) );
HXLINE(  79)		if (( (bool)(directions->__Field(HX_("up",5b,66,00,00),::hx::paccDynamic)) )) {
HXLINE(  81)			newAngle = ( (Float)(-90) );
HXLINE(  82)			if (( (bool)(directions->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic)) )) {
HXLINE(  83)				newAngle = ( (Float)(-135) );
            			}
HXLINE(  84)			if (( (bool)(directions->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic)) )) {
HXLINE(  85)				newAngle = ( (Float)(-45) );
            			}
HXLINE(  86)			this->player->set_facing(256);
            		}
            		else {
HXLINE(  88)			if (( (bool)(directions->__Field(HX_("down",62,f8,6d,42),::hx::paccDynamic)) )) {
HXLINE(  90)				newAngle = ( (Float)(90) );
HXLINE(  91)				if (( (bool)(directions->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic)) )) {
HXLINE(  92)					newAngle = ( (Float)(135) );
            				}
HXLINE(  93)				if (( (bool)(directions->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic)) )) {
HXLINE(  94)					newAngle = ( (Float)(45) );
            				}
HXLINE(  95)				this->player->set_facing(4096);
            			}
            			else {
HXLINE(  97)				if (( (bool)(directions->__Field(HX_("left",07,08,b0,47),::hx::paccDynamic)) )) {
HXLINE(  99)					newAngle = ( (Float)(180) );
HXLINE( 100)					this->player->set_facing(1);
            				}
            				else {
HXLINE( 102)					if (( (bool)(directions->__Field(HX_("right",dc,0b,64,e9),::hx::paccDynamic)) )) {
HXLINE( 104)						newAngle = ( (Float)(0) );
HXLINE( 105)						this->player->set_facing(16);
            					}
            				}
            			}
            		}
HXLINE( 108)		this->player->velocity->set(((Float)90),0);
HXLINE( 109)		 ::flixel::math::FlxPoint _hx_tmp = this->player->velocity;
HXDLIN( 109)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 109)		point->_inPool = false;
HXDLIN( 109)		 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 109)		point1->_weak = true;
HXDLIN( 109)		_hx_tmp->rotate(point1,newAngle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayerControls_obj,updateMovement,(void))

void PlayerControls_obj::action(){
            	HX_STACKFRAME(&_hx_pos_3255715d04918437_113_action)
HXLINE( 114)		 ::Entity target = this->player->getTarget();
HXLINE( 115)		 ::Equipment equipped = this->player->getEquipped();
HXLINE( 116)		target->use(equipped);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayerControls_obj,action,(void))

Float PlayerControls_obj::SPEED;


::hx::ObjectPtr< PlayerControls_obj > PlayerControls_obj::__new( ::Player controlledPlayer) {
	::hx::ObjectPtr< PlayerControls_obj > __this = new PlayerControls_obj();
	__this->__construct(controlledPlayer);
	return __this;
}

::hx::ObjectPtr< PlayerControls_obj > PlayerControls_obj::__alloc(::hx::Ctx *_hx_ctx, ::Player controlledPlayer) {
	PlayerControls_obj *__this = (PlayerControls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayerControls_obj), true, "PlayerControls"));
	*(void **)__this = PlayerControls_obj::_hx_vtable;
	__this->__construct(controlledPlayer);
	return __this;
}

PlayerControls_obj::PlayerControls_obj()
{
}

void PlayerControls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayerControls);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(playerActions,"playerActions");
	HX_MARK_END_CLASS();
}

void PlayerControls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(playerActions,"playerActions");
}

::hx::Val PlayerControls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"action") ) { return ::hx::Val( action_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkInputs") ) { return ::hx::Val( checkInputs_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playerActions") ) { return ::hx::Val( playerActions ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMovement") ) { return ::hx::Val( updateMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayerControls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::PlayerTarget >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playerActions") ) { playerActions=inValue.Cast<  ::PlayerActions >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayerControls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("playerActions",9c,de,a6,de));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayerControls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(PlayerControls_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::PlayerTarget */ ,(int)offsetof(PlayerControls_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::PlayerActions */ ,(int)offsetof(PlayerControls_obj,playerActions),HX_("playerActions",9c,de,a6,de)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayerControls_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &PlayerControls_obj::SPEED,HX_("SPEED",67,cf,57,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayerControls_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("target",51,f3,ec,86),
	HX_("playerActions",9c,de,a6,de),
	HX_("checkInputs",11,98,ff,7d),
	HX_("updateMovement",58,78,61,35),
	HX_("action",b6,3b,46,16),
	::String(null()) };

static void PlayerControls_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayerControls_obj::SPEED,"SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayerControls_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayerControls_obj::SPEED,"SPEED");
};

#endif

::hx::Class PlayerControls_obj::__mClass;

static ::String PlayerControls_obj_sStaticFields[] = {
	HX_("SPEED",67,cf,57,ff),
	::String(null())
};

void PlayerControls_obj::__register()
{
	PlayerControls_obj _hx_dummy;
	PlayerControls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayerControls",17,8b,58,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayerControls_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayerControls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayerControls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayerControls_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayerControls_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayerControls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayerControls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayerControls_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3255715d04918437_21_boot)
HXDLIN(  21)		SPEED = ((Float)90);
            	}
}

