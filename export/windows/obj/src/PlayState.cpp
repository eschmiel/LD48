// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Cursor
#include <Cursor.h>
#endif
#ifndef INCLUDED_Deco
#include <Deco.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_EntityInterface
#include <EntityInterface.h>
#endif
#ifndef INCLUDED_FarmMenu
#include <FarmMenu.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_PlayerTarget
#include <PlayerTarget.h>
#endif
#ifndef INCLUDED_Soil
#include <Soil.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_10_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",10,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_27_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",27,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_43_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",43,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_59_setTarget,"PlayState","setTarget",0x22e72c42,"PlayState.setTarget","PlayState.hx",59,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_63_updatePlayerTarget,"PlayState","updatePlayerTarget",0xd0909bac,"PlayState.updatePlayerTarget","PlayState.hx",63,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_70_updateCursor,"PlayState","updateCursor",0x59e1a970,"PlayState.updateCursor","PlayState.hx",70,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_79_setupSoil,"PlayState","setupSoil",0xe339404b,"PlayState.setupSoil","PlayState.hx",79,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_83_placeDeco,"PlayState","placeDeco",0x52e7a483,"PlayState.placeDeco","PlayState.hx",83,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_101_setupMap,"PlayState","setupMap",0xd1ef0750,"PlayState.setupMap","PlayState.hx",101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_116_setupEntities,"PlayState","setupEntities",0xf6450d0d,"PlayState.setupEntities","PlayState.hx",116,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_127_setupPlayer,"PlayState","setupPlayer",0x21bcd72d,"PlayState.setupPlayer","PlayState.hx",127,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_10_new)
HXDLIN(  10)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_27_create)
HXLINE(  28)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,HX_("assets/data/farm.ogmo",19,b8,f7,80),HX_("assets/data/farmRed.json",b4,f8,2b,d2));
HXLINE(  30)		this->setupMap();
HXLINE(  31)		this->setupEntities();
HXLINE(  32)		this->setupPlayer();
HXLINE(  33)		this->farmMenu =  ::FarmMenu_obj::__alloc( HX_CTX );
HXLINE(  35)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),1);
HXLINE(  37)		this->super::create();
HXLINE(  39)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(4) ));
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_43_update)
HXLINE(  44)		this->super::update(elapsed);
HXLINE(  46)		this->playerTarget->clearTarget();
HXLINE(  47)		this->updatePlayerTarget();
HXLINE(  49)		{
HXLINE(  49)			 ::Dynamic NotifyCallback = null();
HXDLIN(  49)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->fence) ),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE(  50)		{
HXLINE(  50)			 ::Dynamic NotifyCallback1 = null();
HXDLIN(  50)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->deco) ),NotifyCallback1,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE(  52)		::flixel::FlxG_obj::overlap(this->playerTarget,this->soil,this->setTarget_dyn(),null());
HXLINE(  53)		 ::Player _hx_tmp = this->player;
HXDLIN(  53)		_hx_tmp->loadTarget(this->playerTarget->getTarget());
HXLINE(  54)		this->updateCursor();
            	}


void PlayState_obj::setTarget( ::Dynamic playerTargetObject, ::flixel::FlxObject target){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_59_setTarget)
HXDLIN(  59)		playerTargetObject->__Field(HX_("setTarget",93,68,94,e6),::hx::paccDynamic)(target);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,setTarget,(void))

void PlayState_obj::updatePlayerTarget(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_63_updatePlayerTarget)
HXLINE(  64)		 ::flixel::math::FlxPoint playerMidpoint = this->player->getMidpoint(null());
HXLINE(  66)		this->playerTarget->updatePosition(playerMidpoint->x,playerMidpoint->y,this->player->facing);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updatePlayerTarget,(void))

void PlayState_obj::updateCursor(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_70_updateCursor)
HXLINE(  71)		 ::Entity target = this->playerTarget->getTarget();
HXLINE(  73)		if (::hx::IsNotNull( target )) {
HXLINE(  74)			this->cursor->placeOn(target);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateCursor,(void))

void PlayState_obj::setupSoil( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_79_setupSoil)
HXDLIN(  79)		 ::flixel::group::FlxTypedGroup _hx_tmp = this->soil;
HXDLIN(  79)		_hx_tmp->add( ::Soil_obj::__alloc( HX_CTX ,( (Float)(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ),( (Float)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ))).StaticCast<  ::Soil >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setupSoil,(void))

void PlayState_obj::placeDeco( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_83_placeDeco)
HXLINE(  84)		Float x = ( (Float)(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE(  85)		Float y = ( (Float)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE(  87)		::String _hx_switch_0 = ( (::String)(entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("carrot",83,32,e4,ba)) ){
HXLINE(  92)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->deco;
HXDLIN(  92)			_hx_tmp->add( ::Deco_obj::__alloc( HX_CTX ,x,y,HX_("CARROT",83,de,66,6d))).StaticCast<  ::Deco >();
HXDLIN(  92)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("rock",a5,e3,ae,4b)) ){
HXLINE(  90)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->deco;
HXDLIN(  90)			_hx_tmp->add( ::Deco_obj::__alloc( HX_CTX ,x,y,HX_("ROCK",a5,ab,6f,36))).StaticCast<  ::Deco >();
HXDLIN(  90)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("turnip",a4,e0,f5,0a)) ){
HXLINE(  94)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->deco;
HXDLIN(  94)			_hx_tmp->add( ::Deco_obj::__alloc( HX_CTX ,x,y,HX_("TURNIP",a4,8c,78,bd))).StaticCast<  ::Deco >();
HXDLIN(  94)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("weed",ed,5f,f5,4e)) ){
HXLINE(  96)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->deco;
HXDLIN(  96)			_hx_tmp->add( ::Deco_obj::__alloc( HX_CTX ,x,y,HX_("WEED",ed,27,b6,39))).StaticCast<  ::Deco >();
HXDLIN(  96)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,placeDeco,(void))

void PlayState_obj::setupMap(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_101_setupMap)
HXLINE( 102)		this->fence = this->map->loadTilemap(HX_("assets/images/groundTiles.png",6e,96,03,9f),HX_("fence",b1,86,f5,fd),null());
HXLINE( 103)		this->fence->follow(null(),null(),null());
HXLINE( 104)		{
HXLINE( 105)			this->fence->setTileProperties(31,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(32,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(33,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(34,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(35,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(36,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(37,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(38,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(39,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(40,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(41,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(42,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(43,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(44,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(45,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(46,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(47,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(48,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(49,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(50,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(51,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(52,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(53,4369,null(),null(),null());
HXDLIN( 105)			this->fence->setTileProperties(54,4369,null(),null(),null());
            		}
HXLINE( 106)		this->fence->setTileProperties(1,0,null(),null(),null());
HXLINE( 107)		this->add(this->fence);
HXLINE( 109)		this->ground = this->map->loadTilemap(HX_("assets/images/groundTiles.png",6e,96,03,9f),HX_("ground",87,22,28,1c),null());
HXLINE( 110)		{
HXLINE( 110)			int _g = 6;
HXDLIN( 110)			while((_g < 70)){
HXLINE( 110)				_g = (_g + 1);
HXDLIN( 110)				int tile = (_g - 1);
HXLINE( 111)				this->ground->setTileProperties(tile,0,null(),null(),null());
            			}
            		}
HXLINE( 112)		this->add(this->ground);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupMap,(void))

void PlayState_obj::setupEntities(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_116_setupEntities)
HXLINE( 117)		this->soil =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 118)		this->add(this->soil);
HXLINE( 119)		this->map->loadEntities(this->setupSoil_dyn(),HX_("soil",7f,1f,58,4c));
HXLINE( 121)		this->deco =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 122)		this->add(this->deco);
HXLINE( 123)		this->map->loadEntities(this->placeDeco_dyn(),HX_("deco",6d,50,66,42));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupEntities,(void))

void PlayState_obj::setupPlayer(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_127_setupPlayer)
HXLINE( 128)		this->player =  ::Player_obj::__alloc( HX_CTX ,80,100);
HXLINE( 129)		this->add(this->player);
HXLINE( 131)		this->playerTarget =  ::PlayerTarget_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 132)		this->add(this->playerTarget);
HXLINE( 134)		this->cursor =  ::Cursor_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 135)		this->add(this->cursor);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setupPlayer,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(playerTarget,"playerTarget");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(soil,"soil");
	HX_MARK_MEMBER_NAME(deco,"deco");
	HX_MARK_MEMBER_NAME(fence,"fence");
	HX_MARK_MEMBER_NAME(ground,"ground");
	HX_MARK_MEMBER_NAME(farmMenu,"farmMenu");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(playerTarget,"playerTarget");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(soil,"soil");
	HX_VISIT_MEMBER_NAME(deco,"deco");
	HX_VISIT_MEMBER_NAME(fence,"fence");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	HX_VISIT_MEMBER_NAME(farmMenu,"farmMenu");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"soil") ) { return ::hx::Val( soil ); }
		if (HX_FIELD_EQ(inName,"deco") ) { return ::hx::Val( deco ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fence") ) { return ::hx::Val( fence ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"cursor") ) { return ::hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"ground") ) { return ::hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"farmMenu") ) { return ::hx::Val( farmMenu ); }
		if (HX_FIELD_EQ(inName,"setupMap") ) { return ::hx::Val( setupMap_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setTarget") ) { return ::hx::Val( setTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupSoil") ) { return ::hx::Val( setupSoil_dyn() ); }
		if (HX_FIELD_EQ(inName,"placeDeco") ) { return ::hx::Val( placeDeco_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setupPlayer") ) { return ::hx::Val( setupPlayer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerTarget") ) { return ::hx::Val( playerTarget ); }
		if (HX_FIELD_EQ(inName,"updateCursor") ) { return ::hx::Val( updateCursor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setupEntities") ) { return ::hx::Val( setupEntities_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updatePlayerTarget") ) { return ::hx::Val( updatePlayerTarget_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"soil") ) { soil=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deco") ) { deco=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fence") ) { fence=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::Cursor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"farmMenu") ) { farmMenu=inValue.Cast<  ::FarmMenu >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerTarget") ) { playerTarget=inValue.Cast<  ::PlayerTarget >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("playerTarget",92,91,de,82));
	outFields->push(HX_("cursor",d6,8e,e8,3e));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("soil",7f,1f,58,4c));
	outFields->push(HX_("deco",6d,50,66,42));
	outFields->push(HX_("fence",b1,86,f5,fd));
	outFields->push(HX_("ground",87,22,28,1c));
	outFields->push(HX_("farmMenu",75,46,4a,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(PlayState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::PlayerTarget */ ,(int)offsetof(PlayState_obj,playerTarget),HX_("playerTarget",92,91,de,82)},
	{::hx::fsObject /*  ::Cursor */ ,(int)offsetof(PlayState_obj,cursor),HX_("cursor",d6,8e,e8,3e)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(PlayState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,soil),HX_("soil",7f,1f,58,4c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,deco),HX_("deco",6d,50,66,42)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,fence),HX_("fence",b1,86,f5,fd)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,ground),HX_("ground",87,22,28,1c)},
	{::hx::fsObject /*  ::FarmMenu */ ,(int)offsetof(PlayState_obj,farmMenu),HX_("farmMenu",75,46,4a,16)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("playerTarget",92,91,de,82),
	HX_("cursor",d6,8e,e8,3e),
	HX_("map",9c,0a,53,00),
	HX_("soil",7f,1f,58,4c),
	HX_("deco",6d,50,66,42),
	HX_("fence",b1,86,f5,fd),
	HX_("ground",87,22,28,1c),
	HX_("farmMenu",75,46,4a,16),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("setTarget",93,68,94,e6),
	HX_("updatePlayerTarget",3b,cd,eb,fa),
	HX_("updateCursor",bf,35,ac,3e),
	HX_("setupSoil",9c,7c,e6,a6),
	HX_("placeDeco",d4,e0,94,16),
	HX_("setupMap",1f,80,2b,23),
	HX_("setupEntities",de,45,b5,42),
	HX_("setupPlayer",be,89,6e,18),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

