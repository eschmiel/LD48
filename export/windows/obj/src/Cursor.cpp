// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Cursor
#include <Cursor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4850e3db660c81a9_9_new,"Cursor","new",0x067456e8,"Cursor.new","Cursor.hx",9,0x0dcdfd88)
static const int _hx_array_data_737d02f6_1[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_4850e3db660c81a9_16_update,"Cursor","update",0x0161c481,"Cursor.update","Cursor.hx",16,0x0dcdfd88)
HX_LOCAL_STACK_FRAME(_hx_pos_4850e3db660c81a9_23_placeOn,"Cursor","placeOn",0x11e4a44e,"Cursor.placeOn","Cursor.hx",23,0x0dcdfd88)

void Cursor_obj::__construct(::hx::Null< Float >  __o_startingX,::hx::Null< Float >  __o_startingY){
            		Float startingX = __o_startingX.Default(0);
            		Float startingY = __o_startingY.Default(0);
            	HX_STACKFRAME(&_hx_pos_4850e3db660c81a9_9_new)
HXLINE(  10)		super::__construct(startingX,startingY,null());
HXLINE(  11)		this->loadGraphic(HX_("assets/images/cursor.png",7c,8a,a0,3f),true,8,8,null(),null());
HXLINE(  12)		this->animation->add(HX_("targeting",31,42,47,69),::Array_obj< int >::fromData( _hx_array_data_737d02f6_1,4),5,true,null(),null());
            	}

Dynamic Cursor_obj::__CreateEmpty() { return new Cursor_obj; }

void *Cursor_obj::_hx_vtable = 0;

Dynamic Cursor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Cursor_obj > _hx_result = new Cursor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Cursor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3b14ca1a) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x3b14ca1a;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Cursor_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4850e3db660c81a9_16_update)
HXLINE(  17)		this->animation->play(HX_("targeting",31,42,47,69),null(),null(),null());
HXLINE(  18)		this->super::update(elapsed);
            	}


void Cursor_obj::placeOn( ::flixel::FlxObject object){
            	HX_STACKFRAME(&_hx_pos_4850e3db660c81a9_23_placeOn)
HXDLIN(  23)		this->setPosition(object->x,object->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cursor_obj,placeOn,(void))


::hx::ObjectPtr< Cursor_obj > Cursor_obj::__new(::hx::Null< Float >  __o_startingX,::hx::Null< Float >  __o_startingY) {
	::hx::ObjectPtr< Cursor_obj > __this = new Cursor_obj();
	__this->__construct(__o_startingX,__o_startingY);
	return __this;
}

::hx::ObjectPtr< Cursor_obj > Cursor_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_startingX,::hx::Null< Float >  __o_startingY) {
	Cursor_obj *__this = (Cursor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Cursor_obj), true, "Cursor"));
	*(void **)__this = Cursor_obj::_hx_vtable;
	__this->__construct(__o_startingX,__o_startingY);
	return __this;
}

Cursor_obj::Cursor_obj()
{
}

::hx::Val Cursor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"placeOn") ) { return ::hx::Val( placeOn_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Cursor_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Cursor_obj_sStaticStorageInfo = 0;
#endif

static ::String Cursor_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("placeOn",c6,39,8a,7b),
	::String(null()) };

::hx::Class Cursor_obj::__mClass;

void Cursor_obj::__register()
{
	Cursor_obj _hx_dummy;
	Cursor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Cursor",f6,02,7d,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Cursor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Cursor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cursor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cursor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

