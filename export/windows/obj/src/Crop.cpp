// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Crop
#include <Crop.h>
#endif
#ifndef INCLUDED_CropQuality
#include <CropQuality.h>
#endif
#ifndef INCLUDED_CropType
#include <CropType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_882545e7ab594419_16_new,"Crop","new",0x79fc66a2,"Crop.new","Crop.hx",16,0xaa72c30e)
HX_LOCAL_STACK_FRAME(_hx_pos_882545e7ab594419_36_water,"Crop","water",0x6ad142d9,"Crop.water","Crop.hx",36,0xaa72c30e)
HX_LOCAL_STACK_FRAME(_hx_pos_882545e7ab594419_49_update,"Crop","update",0xd7fec507,"Crop.update","Crop.hx",49,0xaa72c30e)

void Crop_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_882545e7ab594419_16_new)
HXLINE(  27)		this->days = 0;
HXLINE(  26)		this->hp = 0;
HXLINE(  25)		this->maxHp = 0;
HXLINE(  23)		this->watered = false;
HXLINE(  22)		this->pickable = false;
HXLINE(  21)		this->active = false;
            	}

Dynamic Crop_obj::__CreateEmpty() { return new Crop_obj; }

void *Crop_obj::_hx_vtable = 0;

Dynamic Crop_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Crop_obj > _hx_result = new Crop_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Crop_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00f323d4;
}

void Crop_obj::water(){
            	HX_STACKFRAME(&_hx_pos_882545e7ab594419_36_water)
HXDLIN(  36)		if (!(this->watered)) {
HXLINE(  38)			if (!(this->active)) {
HXLINE(  39)				this->active = true;
            			}
HXLINE(  40)			if ((this->days < this->dayOfDecline)) {
HXLINE(  41)				 ::Crop _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  41)				_hx_tmp->hp = (_hx_tmp->hp + 2);
            			}
HXLINE(  42)			if ((this->hp < this->maxHp)) {
HXLINE(  43)				this->hp = this->maxHp;
            			}
HXLINE(  44)			this->watered = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Crop_obj,water,(void))

::String Crop_obj::update(){
            	HX_STACKFRAME(&_hx_pos_882545e7ab594419_49_update)
HXLINE(  50)		this->graphic = HX_("assets/images/turnip.png",4a,db,b5,a7);
HXLINE(  52)		return this->graphic;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Crop_obj,update,return )


Crop_obj::Crop_obj()
{
}

void Crop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Crop);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(pickable,"pickable");
	HX_MARK_MEMBER_NAME(watered,"watered");
	HX_MARK_MEMBER_NAME(maxHp,"maxHp");
	HX_MARK_MEMBER_NAME(hp,"hp");
	HX_MARK_MEMBER_NAME(days,"days");
	HX_MARK_MEMBER_NAME(dayOfMaturity,"dayOfMaturity");
	HX_MARK_MEMBER_NAME(dayOfDecline,"dayOfDecline");
	HX_MARK_MEMBER_NAME(quality,"quality");
	HX_MARK_END_CLASS();
}

void Crop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(pickable,"pickable");
	HX_VISIT_MEMBER_NAME(watered,"watered");
	HX_VISIT_MEMBER_NAME(maxHp,"maxHp");
	HX_VISIT_MEMBER_NAME(hp,"hp");
	HX_VISIT_MEMBER_NAME(days,"days");
	HX_VISIT_MEMBER_NAME(dayOfMaturity,"dayOfMaturity");
	HX_VISIT_MEMBER_NAME(dayOfDecline,"dayOfDecline");
	HX_VISIT_MEMBER_NAME(quality,"quality");
}

::hx::Val Crop_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"hp") ) { return ::hx::Val( hp ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"days") ) { return ::hx::Val( days ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxHp") ) { return ::hx::Val( maxHp ); }
		if (HX_FIELD_EQ(inName,"water") ) { return ::hx::Val( water_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return ::hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"watered") ) { return ::hx::Val( watered ); }
		if (HX_FIELD_EQ(inName,"quality") ) { return ::hx::Val( quality ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pickable") ) { return ::hx::Val( pickable ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dayOfDecline") ) { return ::hx::Val( dayOfDecline ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dayOfMaturity") ) { return ::hx::Val( dayOfMaturity ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Crop_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"hp") ) { hp=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::CropType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"days") ) { days=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maxHp") ) { maxHp=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { graphic=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"watered") ) { watered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quality") ) { quality=inValue.Cast<  ::CropQuality >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pickable") ) { pickable=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dayOfDecline") ) { dayOfDecline=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dayOfMaturity") ) { dayOfMaturity=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Crop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("graphic",a8,5a,07,74));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("pickable",fb,da,fc,85));
	outFields->push(HX_("watered",36,e4,ac,2a));
	outFields->push(HX_("maxHp",cc,3a,26,03));
	outFields->push(HX_("hp",08,5b,00,00));
	outFields->push(HX_("days",97,5a,63,42));
	outFields->push(HX_("dayOfMaturity",04,87,c5,75));
	outFields->push(HX_("dayOfDecline",63,80,f6,fe));
	outFields->push(HX_("quality",bf,04,4c,44));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Crop_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::CropType */ ,(int)offsetof(Crop_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsString,(int)offsetof(Crop_obj,graphic),HX_("graphic",a8,5a,07,74)},
	{::hx::fsBool,(int)offsetof(Crop_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsBool,(int)offsetof(Crop_obj,pickable),HX_("pickable",fb,da,fc,85)},
	{::hx::fsBool,(int)offsetof(Crop_obj,watered),HX_("watered",36,e4,ac,2a)},
	{::hx::fsInt,(int)offsetof(Crop_obj,maxHp),HX_("maxHp",cc,3a,26,03)},
	{::hx::fsInt,(int)offsetof(Crop_obj,hp),HX_("hp",08,5b,00,00)},
	{::hx::fsInt,(int)offsetof(Crop_obj,days),HX_("days",97,5a,63,42)},
	{::hx::fsInt,(int)offsetof(Crop_obj,dayOfMaturity),HX_("dayOfMaturity",04,87,c5,75)},
	{::hx::fsInt,(int)offsetof(Crop_obj,dayOfDecline),HX_("dayOfDecline",63,80,f6,fe)},
	{::hx::fsObject /*  ::CropQuality */ ,(int)offsetof(Crop_obj,quality),HX_("quality",bf,04,4c,44)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Crop_obj_sStaticStorageInfo = 0;
#endif

static ::String Crop_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("graphic",a8,5a,07,74),
	HX_("active",c6,41,46,16),
	HX_("pickable",fb,da,fc,85),
	HX_("watered",36,e4,ac,2a),
	HX_("maxHp",cc,3a,26,03),
	HX_("hp",08,5b,00,00),
	HX_("days",97,5a,63,42),
	HX_("dayOfMaturity",04,87,c5,75),
	HX_("dayOfDecline",63,80,f6,fe),
	HX_("quality",bf,04,4c,44),
	HX_("water",17,18,25,c5),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Crop_obj::__mClass;

void Crop_obj::__register()
{
	Crop_obj _hx_dummy;
	Crop_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Crop",b0,2d,a0,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Crop_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Crop_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Crop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Crop_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

