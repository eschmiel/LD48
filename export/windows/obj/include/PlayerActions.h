// Generated by Haxe 4.1.5
#ifndef INCLUDED_PlayerActions
#define INCLUDED_PlayerActions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EntityInterface)
HX_DECLARE_CLASS0(PlayerActions)
HX_DECLARE_CLASS0(Soil)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayerActions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PlayerActions_obj OBJ_;
		PlayerActions_obj();

	public:
		enum { _hx_ClassId = 0x02de43bc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="PlayerActions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"PlayerActions"); }
		static ::hx::ObjectPtr< PlayerActions_obj > __new();
		static ::hx::ObjectPtr< PlayerActions_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayerActions_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayerActions",7c,2e,97,26); }

		void till( ::Soil target);
		::Dynamic till_dyn();

};


#endif /* INCLUDED_PlayerActions */ 
