// Generated by Haxe 4.1.5
#ifndef INCLUDED_EntityManager
#define INCLUDED_EntityManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EntityManager)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES EntityManager_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef EntityManager_obj OBJ_;
		EntityManager_obj();

	public:
		enum { _hx_ClassId = 0x7adc16c6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="EntityManager")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"EntityManager"); }

		inline static ::hx::ObjectPtr< EntityManager_obj > __new() {
			::hx::ObjectPtr< EntityManager_obj > __this = new EntityManager_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< EntityManager_obj > __alloc(::hx::Ctx *_hx_ctx) {
			EntityManager_obj *__this = (EntityManager_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EntityManager_obj), false, "EntityManager"));
			*(void **)__this = EntityManager_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EntityManager_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EntityManager",6a,f1,c4,cf); }

		static void __boot();
		static  ::flixel::group::FlxTypedGroup soil;
		static  ::flixel::group::FlxTypedGroup getSoil();
		static ::Dynamic getSoil_dyn();

};


#endif /* INCLUDED_EntityManager */ 
