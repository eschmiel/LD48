// Generated by Haxe 4.1.5
#ifndef INCLUDED_PlayerAnimator
#define INCLUDED_PlayerAnimator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(PlayerAnimator)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayerAnimator_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PlayerAnimator_obj OBJ_;
		PlayerAnimator_obj();

	public:
		enum { _hx_ClassId = 0x277a02c8 };

		void __construct( ::Player animatedPlayer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayerAnimator")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"PlayerAnimator"); }
		static ::hx::ObjectPtr< PlayerAnimator_obj > __new( ::Player animatedPlayer);
		static ::hx::ObjectPtr< PlayerAnimator_obj > __alloc(::hx::Ctx *_hx_ctx, ::Player animatedPlayer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayerAnimator_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayerAnimator",08,80,8e,45); }

		::String lrAnimation;
		::String downAnimation;
		::String upAnimation;
		 ::Player player;
		void updateAnimation();
		::Dynamic updateAnimation_dyn();

		void setAnimationState(::String state);
		::Dynamic setAnimationState_dyn();

};


#endif /* INCLUDED_PlayerAnimator */ 
