// Generated by Haxe 4.1.5
#ifndef INCLUDED_Entity
#define INCLUDED_Entity

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_EntityInterface
#include <EntityInterface.h>
#endif
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS0(EntityInterface)
HX_DECLARE_CLASS0(Equipment)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Entity_obj : public  ::flixel::FlxObject_obj
{
	public:
		typedef  ::flixel::FlxObject_obj super;
		typedef Entity_obj OBJ_;
		Entity_obj();

	public:
		enum { _hx_ClassId = 0x01484e67 };

		void __construct( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Entity")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Entity"); }
		static ::hx::ObjectPtr< Entity_obj > __new( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height);
		static ::hx::ObjectPtr< Entity_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Entity_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Entity",43,87,b0,39); }

		bool use( ::Equipment equipped);
		::Dynamic use_dyn();

};


#endif /* INCLUDED_Entity */ 
